// <auto-generated />
using System;
using CarDirectory.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CarDirectory.Data.Migrations
{
    [DbContext(typeof(CarDirectoryContext))]
    [Migration("20220604135751_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0-preview.4.22229.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CarDirectory.Data.Cars.CarDbModel", b =>
                {
                    b.Property<string>("StateNumber")
                        .HasColumnType("text")
                        .HasColumnName("state_number");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("color");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("model");

                    b.Property<int>("ReleaseYear")
                        .HasColumnType("integer")
                        .HasColumnName("release_year");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("StateNumber")
                        .HasName("pk_car");

                    b.ToTable("car", (string)null);
                });

            modelBuilder.Entity("CarDirectory.Data.Fines.FineDbModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<bool>("IsPayed")
                        .HasColumnType("boolean")
                        .HasColumnName("is_payed");

                    b.Property<double>("Price")
                        .HasColumnType("double precision")
                        .HasColumnName("price");

                    b.Property<DateTime>("ReceiptDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("receipt_date");

                    b.Property<string>("StateNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("state_number");

                    b.HasKey("Id")
                        .HasName("pk_fine");

                    b.HasIndex("StateNumber")
                        .HasDatabaseName("ix_fine_state_number");

                    b.ToTable("fine", (string)null);
                });

            modelBuilder.Entity("CarDirectory.Data.Fines.FineDbModel", b =>
                {
                    b.HasOne("CarDirectory.Data.Cars.CarDbModel", "Car")
                        .WithMany("Fines")
                        .HasForeignKey("StateNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_fine_car_car_state_number");

                    b.Navigation("Car");
                });

            modelBuilder.Entity("CarDirectory.Data.Cars.CarDbModel", b =>
                {
                    b.Navigation("Fines");
                });
#pragma warning restore 612, 618
        }
    }
}
